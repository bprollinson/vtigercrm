<?php
/*********************************************************************************
  ** The contents of this file are subject to the vtiger CRM Public License Version 1.0
   * ("License"); You may not use this file except in compliance with the License
   * The Original Code is:  vtiger CRM Open Source
   * The Initial Developer of the Original Code is vtiger.
   * Portions created by vtiger are Copyright (C) vtiger.
   * All Rights Reserved.
  *
 ********************************************************************************/

require_once('config.inc.php');

/** Verify the script call is from trusted place. */
global $application_unique_key;
if($_REQUEST['app_key'] != $application_unique_key) {
	echo "Access denied!";
	exit;
}

require_once('include/utils/utils.php');
require_once('include/logging.php');

// Get the list of Invoice for which Recurring is enabled.

global $adb, $log;
$log =& LoggerManager::getLogger('RecurringInvoice');
$log->debug("invoked RecurringInvoice");

$sql="SELECT vtiger_salesorder.salesorderid, recurring_frequency, start_period, end_period, last_recurring_date 
		 FROM vtiger_salesorder 
		 INNER JOIN vtiger_crmentity ON vtiger_salesorder.salesorderid = vtiger_crmentity.crmid AND vtiger_crmentity.deleted = 0 
		 INNER JOIN vtiger_invoice_recurring_info ON vtiger_salesorder.salesorderid = vtiger_invoice_recurring_info.salesorderid
		 WHERE DATE_FORMAT(start_period,'%Y-%m-%d') <= '".date('Y-m-d')."' AND DATE_FORMAT(end_period,'%Y-%m-%d') >= '".date('Y-m-d')."'";
$result = $adb->pquery($sql, array());

$no_of_salesorder = $adb->num_rows($result);
if($no_of_salesorder > 0) {
	
	for($i=0; $i<$no_of_salesorder;$i++) {
		$salesorder_id = $adb->query_result($result, $i,'salesorderid');
		$start_period = $adb->query_result($result, $i,'start_period');
		$end_period = $adb->query_result($result, $i,'end_period');
		$last_recurring_date = $adb->query_result($result, $i,'last_recurring_date');
		$recurring_frequency = $adb->query_result($result, $i,'recurring_frequency');
		if ($last_recurring_date == NULL  || $last_recurring_date == '' || $last_recurring_date == '0000-00-00') {		
			$sy = date("Y", strtotime($start_period));
			$sm = date("m", strtotime($start_period));
			$sd = date("d", strtotime($start_period));
			$last_recurring_date = date('Y-m-d', strtotime($sy.'-'.$sm.'-'.($sd-1))); // Set last recurring date to a day before the start period.
		}		
		$y = date("Y", strtotime($last_recurring_date));
		$m = date("m", strtotime($last_recurring_date));
		$d = date("d", strtotime($last_recurring_date));
		if (strtolower($recurring_frequency) == 'daily') {
			$next_recurring_date= date('Y-m-d', strtotime($y.'-'.$m.'-'.($d+1)));
			if(strtotime($next_recurring_date) > strtotime($end_period) || strtotime($next_recurring_date) > strtotime(date('Y-m-d'))) {
				continue;
			}
		}
		if (strtolower($recurring_frequency) == 'weekly') {
			$next_recurring_date= date('Y-m-d', strtotime($y.'-'.$m.'-'.($d+7)));
			if(strtotime($next_recurring_date) > strtotime($end_period) || strtotime($next_recurring_date) > strtotime(date('Y-m-d'))) {
				continue;
			}			
		}
		if (strtolower($recurring_frequency) == 'monthly') {
			$next_recurring_date= date('Y-m-d', strtotime($y.'-'.($m+1).'-'.$d));
			if(strtotime($next_recurring_date) > strtotime($end_period) || strtotime($next_recurring_date) > strtotime(date('Y-m-d'))) {
				continue;
			}			
		}
		if (strtolower($recurring_frequency) == 'quarterly') {
			$next_recurring_date= date('Y-m-d', strtotime($y.'-'.($m+3).'-'.$d));
			if(strtotime($next_recurring_date) > strtotime($end_period) || strtotime($next_recurring_date) > strtotime(date('Y-m-d'))) {
				continue;
			}			
		}
		if (strtolower($recurring_frequency) == 'yearly') {
			$next_recurring_date= date('Y-m-d', strtotime(($y+1).'-'.$m.'-'.$d));
			if(strtotime($next_recurring_date) > strtotime($end_period) || strtotime($next_recurring_date) > strtotime(date('Y-m-d'))) {
				continue;
			}			
		}
				
		createInvoice($salesorder_id);
		$adb->pquery("UPDATE vtiger_invoice_recurring_info SET last_recurring_date=? WHERE salesorderid=?", array($next_recurring_date,$salesorder_id));
	}
}

/* Function to create a new Invoice using the given Sales Order id */
function createInvoice($salesorder_id) {
	require_once('include/utils/utils.php');
	require_once('modules/SalesOrder/SalesOrder.php');
	require_once('modules/Invoice/Invoice.php');
	require_once('modules/Users/Users.php');
	
	global $log, $adb;
	global $current_user;
		
	if(!$current_user) {
		$current_user = new Users();
		$current_user->id = 1;
		$current_user = $current_user->retrieve_entity_info($current_user->id, "Users");
	}
	$so_focus = new SalesOrder();
	$so_focus->id = $salesorder_id;
	$so_focus->retrieve_entity_info($salesorder_id,"SalesOrder");
	
	$focus = new Invoice();
	// This will only fill in the basic columns from SO to Invoice and also Update the SO id in new Invoice
	$focus = getConvertSoToInvoice($focus,$so_focus,$salesorder_id);
		
	// Cleanup focus object, to duplicate the Invoice.
	$focus->id = '';
	$focus->mode = '';
	$focus->column_fields['invoice_no'] = setInventorySeqNumber("increment_invno",'Invoice');
	$focus->column_fields['invoicestatus'] = 'Created';
	$focus->column_fields['invoicedate'] = date('Y-m-d');
	
	// Additional SO fields to copy -> Invoice field name mapped to equivalent SO field name
	$invoice_so_fields = Array (
		'txtAdjustment' => 'txtAdjustment',
		'hdnSubTotal' => 'hdnSubTotal', 
		'hdnGrandTotal' => 'hdnGrandTotal', 
		'hdnTaxType' => 'hdnTaxType',
		'hdnDiscountPercent' => 'hdnDiscountPercent',
		'hdnDiscountAmount' => 'hdnDiscountAmount',
		'hdnS_H_Amount' => 'hdnS_H_Amount',
		'assigned_user_id' => 'assigned_user_id',
		'currency_id' => 'currency_id',
		'conversion_rate' => 'conversion_rate',
	);	
	foreach($invoice_so_fields as $invoice_field => $so_field) {
		$focus->column_fields[$invoice_field] = $so_focus->column_fields[$so_field];
	}	
	
	$focus->save("Invoice");
	
	// Add the products for the Invoice
	$query1 = "SELECT * FROM vtiger_inventoryproductrel WHERE id=?";
	$res = $adb->pquery($query1, array($salesorder_id));
	$no_of_products = $adb->num_rows($res);
	$fieldsList = $adb->getFieldsArray($res);
	for($j=0; $j<$no_of_products; $j++) {
		$row = $adb->query_result_rowdata($res, $j);
		$col_value = array();
		for($k=0; $k<count($fieldsList); $k++) {
			$col_value[$fieldsList[$k]] = $row[$fieldsList[$k]];
		}
		if(count($col_value) > 0) {
			$col_value['id'] = $focus->id;
			$columns = array_keys($col_value);
			$values = array_values($col_value);
			$query2 = "INSERT INTO vtiger_inventoryproductrel(". implode(",",$columns) .") VALUES (". generateQuestionMarks($values) .")";
			$adb->pquery($query2, array($values));
			$prod_id = $col_value['productid'];	
			$qty = $col_value['quantity'];	
			updateStk($prod_id,$qty,'',array(),'Invoice');
		}
	}
	
	// Add the Shipping taxes for the Invoice
	$query3 = "SELECT * FROM vtiger_inventoryshippingrel WHERE id=?";
	$res = $adb->pquery($query3, array($salesorder_id));
	$no_of_shippingtax = $adb->num_rows($res);
	$fieldsList = $adb->getFieldsArray($res);
	for($j=0; $j<$no_of_shippingtax; $j++) {
		$row = $adb->query_result_rowdata($res, $j);
		$col_value = array();
		for($k=0; $k<count($fieldsList); $k++) {
			$col_value[$fieldsList[$k]] = $row[$fieldsList[$k]];
		}
		if(count($col_value) > 0) {
			$col_value['id'] = $focus->id;
			$columns = array_keys($col_value);
			$values = array_values($col_value);
			$query4 = "INSERT INTO vtiger_inventoryshippingrel(". implode(",",$columns) .") VALUES (". generateQuestionMarks($values) .")";
			$adb->pquery($query4, array($values));
		}
	}
	
	//Update the netprice (subtotal), taxtype, discount, S&H charge, adjustment and total for the Invoice
	
	$updatequery  = " UPDATE vtiger_invoice SET ";
	$updateparams = array();
	// Remaining column values to be updated -> column name to field name mapping
	$invoice_column_field = Array (
		'adjustment' => 'txtAdjustment',
		'subtotal' => 'hdnSubTotal', 
		'total' => 'hdnGrandTotal', 
		'taxtype' => 'hdnTaxType',
		'discount_percent' => 'hdnDiscountPercent',
		'discount_amount' => 'hdnDiscountAmount',
		's_h_amount' => 'hdnS_H_Amount',
	);
	$updatecols = array();
	foreach($invoice_column_field as $col => $field) {
		$updatecols[] = "$col=?";
		$updateparams[] = $focus->column_fields[$field];
	}
	if (count($updatecols) > 0) {
		$updatequery .= implode(",", $updatecols);
		
		$updatequery .= " WHERE invoiceid=?";
		array_push($updateparams, $focus->id);
		
		$adb->pquery($updatequery, $updateparams);
	}
}

?>
