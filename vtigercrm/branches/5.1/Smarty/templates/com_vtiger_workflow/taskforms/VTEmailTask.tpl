<script src="modules/com_vtiger_workflow/resources/resources/jquery-1.2.6.js" type="text/javascript" charset="utf-8"></script>
<script src="modules/com_vtiger_workflow/functional.js" type="text/javascript" charset="utf-8"></script>
<script src="modules/com_vtiger_workflow/resources/json2.js" type="text/javascript" charset="utf-8"></script>
<script src="modules/com_vtiger_workflow/resources/vtigerwebservices.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" charset="utf-8">
var moduleName = '{$entityName}';

{literal}


function VTEmailTask($){
	var vtinst = new VtigerWebservices("webservice.php");
	var desc = null;
	
	var map = fn.map;
	var dict = fn.dict;
	var filter = fn.filter;
	var reduceR = fn.reduceR;
	var parallelExecuter = fn.parallelExecuter;
	var contains = fn.contains;
	var concat = fn.concat;
	
	function errorDialog(message){
		alert(message);
	}
	
	function handleError(fn){
		return function(status, result){
			if(status){
				fn(result);
			}else{
				errorDialog('Failure:'+result);
			}
		}
	}

	function getDescribeObjects(moduleName, callback){
		vtinst.describeObject(moduleName, handleError(function(result){
			var parent = result;
			var fields = parent['fields'];
			var referenceFields = filter(function(e){return e['type']['name']=='reference';}, fields);
			var referenceFieldModules = 
				map(
					function(e){
						return filter(
							function(f){
								return f!='Users';
							},
							e['type']['refersTo']
						);
					}, 
					referenceFields
				);
			function union(a, b){
				newfields = filter(function(e){return !contains(a, e);}, b)
				return a.concat(newfields);
			}
			var relatedModules = reduceR(union, referenceFieldModules, [parent['name']]);
			
			function executer(parameters){
				var failures = filter(function(e){return e[0]==false}, parameters);
				if(failures.length!=0){
					var firstFailure = failures[0];
					callback(false, firstFailure[1]);
				}else{
					var moduleDescriptions = map(function(e){return e[1];}, parameters);
					var modules = dict(map(function(e){return [e['name'], e];}, moduleDescriptions));
					callback(true, modules);
				}
			}
			p = parallelExecuter(executer, relatedModules.length);
			$.each(relatedModules, function(i, v){
				p(function(callback){vtinst.describeObject(v, callback);});
			});
		}));
	}
	
	$(document).ready(function(){
		vtinst.extendSession(handleError(function(result){
			getDescribeObjects(moduleName, handleError(function(modules){
				var parent = modules[moduleName];
				var fields = parent['fields'];
				function filteredFields(fields){
					return filter(
						function(e){return !contains(['autogenerated', 'reference', 'owner'], e.type.name);}, 
						fields
					);
				}
				;
				var parentFields = map(function(e){return[e['name'],e['label']];}, filteredFields(parent['fields']));
				var referenceFieldTypes = filter(function(e){return e['type']['name']=='reference' && !contains(e['type']['refersTo'], 'Users');}, parent['fields']);
				var moduleFieldTypes = {};
				$.each(modules, function(k, v){
					moduleFieldTypes[k] = dict(map(function(e){return [e['name'], e['type']];},
						filteredFields(v['fields'])));
				});
				
				function getFieldType(fullFieldName){
					var group = fullFieldName.match(/(\w+) : \((\w+)\) (\w+)/);
					if(group==null){
						var fieldModule = moduleName;
						var fieldName = fullFieldName;
					}else{
						var fieldModule = group[2];
						var fieldName = group[3];
					}
					return moduleFieldTypes[fieldModule][fieldName];
				}
				
				function fieldReferenceNames(referenceField){
					var name = referenceField['name'];
					var label = referenceField['label'];
					function forModule(moduleName){
						return map(function(field){
							return ['('+name+' : '+'('+moduleName+') '+field['name']+')',
									label+' : '+'('+moduleName+') '+field['label']];},
							filteredFields(modules[moduleName]['fields']));
					}
					return reduceR(concat, map(forModule,referenceField['type']['refersTo']),[]);
				}
				
				
				var referenceFields = reduceR(concat, map(fieldReferenceNames, referenceFieldTypes), []);
				var fieldLabels = dict(parentFields.concat(referenceFields));
				//var fields = parent['fields'];
				//var fieldLabels = dict(map(function(e){return [e['name'], e['label']];}, fields));
				var mailFields = map(function(e){return e['name'];}, 
					filter(function(e){return e['type']['name']=='email';}, fields));
				var select = $('#task-fieldnames');
				$.each(fieldLabels, function(k, v){
					select.append('<option class="task-fieldnames_option" value="'+k+'">'+v+'</option>');
				});
				$('#task-fieldnames').change(function(){
					var textarea = $('#save_content').get(0);
					var value = '$'+$(this).attr('value');

					//http://alexking.org/blog/2003/06/02/inserting-at-the-cursor-using-javascript
					if (document.selection) {
						textarea.focus();
						var sel = document.selection.createRange();
						sel.text = value;
						textarea.focus();
					}else if (textarea.selectionStart || textarea.selectionStart == '0') {
						var startPos = textarea.selectionStart;
						var endPos = textarea.selectionEnd;
						var scrollTop = textarea.scrollTop;
						textarea.value = textarea.value.substring(0, startPos)
											+ value
											+ textarea.value.substring(endPos,
												textarea.value.length);
						textarea.focus();
						textarea.selectionStart = startPos + value.length;
						textarea.selectionEnd = startPos + value.length;
						textarea.scrollTop = scrollTop;
					}	else {
						textarea.value += value;
						textarea.focus();
					}
				});
				
				/*var select = $('#task-emailfields');
				$.each(mailFields, function(i, v){
					select.append('<option class="task-emailfields_option" value="'+v+'">' + fieldLabels[v] + '</option>');
				});
				$('.task-emailfields_option').click(function(){
					var input = $($('#save_recepient').get());
					var value = '$'+$(this).attr('value');
					input.attr("value", input.attr("value")+'; '+value);
				});*/
			}));
		}));
	});
	
	
}
vtEmailTask = VTEmailTask(jQuery)
{/literal}
</script>
<table>
	<tr><td>Recepient:</td>
		<td><input type="text" name="recepient" value="{$task->recepient}" id="save_recepient" class="form_input"> <!--select id="task-emailfields"></select--></td></tr>
	<tr><td>Subject:</td>
		<td><input type="text" name="subject" value="{$task->subject}" id="save_subject" class="form_input"></td></tr>
</table>
<p>
<select id='task-fieldnames'></select>
</p>
<p>
	<textarea name="content" rows="15" cols="40" id="save_content">{$task->content}</textarea>
</p>



