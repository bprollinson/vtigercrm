<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
  <meta http-equiv="content-type" content="text/html; charset=windows-1250">
  <meta name="generator" content="PSPad editor, www.pspad.com">
  <title>PHP class_http from Troy Wolf</title>
  <style>
  body {
    font-family:"Trebuchet MS","Arial";
    font-size:11pt;
  }
  table.def {
  }
  table.def th {
    font-family:"Trebuchet MS","Arial";
    font-size:11pt;
    padding:5px;
    font-weight:bold;
    background-color:#E4F6C9;
  }
  table.def td {
    font-family:"Trebuchet MS","Arial";
    font-size:11pt;
    padding:5px;
    border:1px solid #000000;
  }
  h1 {
    margin:10px 0px 5px 0px;
  }
  h2 {
    margin:10px 0px 0px 0px;
  }
  h3 {
    margin:10px 0px 0px 0px;
  }
  .php {
    border:2px #cccccc solid;
    background-color:#f3f3f3;
    padding:5px;
  }
  </style>
  </head>
  <body>

  <h1>class_http.php</h1>
  Author: Troy Wolf (<a href="mailto:troy@troywolf.com">troy@troywolf.com</a>)
  <br />
  Modified Date: 2005-06-24 14:30
  <br />
  Download: <a href="class_http.zip">class_http.zip</a>
  <br />
  View class source: <a href="class_http.phps">class_http.php source</a>
  <br /><br />
  class_http.php is a "screen-scraping" utility that makes it easy to scrape
  content and cache scraped content for any number of seconds desired before
  hitting the live source again. Caching makes you a good neighbor!
  <br /><br />
  The class has 2 static methods that make it easy to
  extract individual tables of data out of web pages. The class even comes with
  a companion script that makes it easy to use and cache external images
  directly within img elements.
  <br /><br />
  The class cloaks itself as the User Agent of the user making the request to
  your script. It also sends your script as the Referer, since in essence, it
  is the referrer.  This means you should be able to screen-scrape sites that
  normally block screen-scraping. This class is not meant to help you break 
  any company's usage policies. Be a good neighbor, and always use caching when
  you can.
  <br /><br />
  Need to access protected content? The class can do basic authentication.
  However, a lot of sites that require login do not use basic authentication.
  <br /><br />
  To use the class in your scripts, you first need to include the class file.
  Modify the path to fit your needs.
  <div class="php"><code>
    <font color="#007700">require_once(</font><font color="#0000BB">dirname</font><font color="#007700">(</font><font color="#0000BB">__FILE__</font><font color="#007700">).</font><font color="#DD0000">'/class_http.php'</font><font color="#007700">);
    </font>
  </code></div>
  <br />
  Instantiate a new http object. You can create one object and use it over and
  over again throughout your script, or you can create multiple objects as
  needed.
  <div class="php"><code>
    <font color="#0000BB">
    $h </font><font color="#007700">= new </font><font color="#0000BB">http</font><font color="#007700">();
    </font>
  </code></div>
  <br />
  The caching feature requires a directory on your webserver to save the cache
  files. If you prefer, you can hard-code this in the class itself by modifying
  the 'dir' property in the http() function (the class constructor). The class
  will default to storing the cache files in the current directory, but for
  security, you should store them in a non web-accessible directory. You can
  set this property per object using the code below. You must end the value with
  a "/". If you do not plan to use caching, don't worry about this property.
  <div class="php"><code>
    <font color="#0000BB">
    $h</font><font color="#007700">-&gt;</font><font color="#0000BB">dir </font><font color="#007700">= </font><font color="#DD0000">"/home/foo/bar/"</font><font color="#007700">; 
    </font>
  </code></div>
  <br />
  Example to screen-scrape the Google home page without caching.
  <div class="php"><code>
    <font color="#007700">if (!</font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">fetch</font><font color="#007700">(</font><font color="#DD0000">"http://www.google.com"</font><font color="#007700">)) {
    <br />&nbsp;&nbsp;echo </font><font color="#DD0000">"&lt;h2&gt;There is a problem with the http request!&lt;/h2&gt;"</font><font color="#007700">;
    <br />&nbsp;&nbsp;echo </font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">log</font><font color="#007700">;
    
    <br />&nbsp;&nbsp;exit();
    <br />}
    </font>
  </code></div>
  <br />
  Once you have executed the fetch() method, you have three properties
  available. The <b>HTTP Status</b>, <b>HTTP headers</b>, and <b>body</b>.
  Usually, you will only be interested in the body content.
  <div class="php"><code>
    <font color="#007700">echo </font><font color="#DD0000">"Status: "</font><font color="#007700">.</font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">status</font><font color="#007700">;
    <br />
    <br />echo </font><font color="#DD0000">"&lt;pre&gt;"</font><font color="#007700">.</font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">header</font><font color="#007700">.</font><font color="#DD0000">"&lt;/pre&gt;"</font><font color="#007700">;
    <br />
    <br />echo </font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">body</font><font color="#007700">;
    </font>
  </code></div>
  <br />
  Here is an example to screen-scrape the MSFT stock page at moneycentral.com WITH caching.
  You can pass in a TTL which is a Time-To-Live in seconds that you want the 
  cached data to be considered "good". For example, if you set the ttl to 600, it
  means that before going to the source site for the data, the local cache will be
  checked. If the cache file exists, and is not more than 10 minutes old, the
  class will use the cache. Otherwise, the source site will be scraped, and the
  local cache file will be updated. This makes your page faster and makes you a
  better neighbor to the external site.
  <div class="php"><code>
    <font color="#0000BB">
    $url </font><font color="#007700">= </font><font color="#DD0000">"http://moneycentral.msn.com/detail/stock_quote?Symbol=MSFT"</font><font color="#007700">;
    <br />if (!</font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">fetch</font><font color="#007700">(</font><font color="#0000BB">$url</font><font color="#007700">, </font><font color="#0000BB">600</font><font color="#007700">)) {
    <br />&nbsp;&nbsp;echo </font><font color="#DD0000">"&lt;h2&gt;There is a problem with the http request!&lt;/h2&gt;"</font><font color="#007700">;
    
    <br />&nbsp;&nbsp;echo </font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">log</font><font color="#007700">;
    <br />&nbsp;&nbsp;exit();
    <br />}
    <br />
    </font>
  </code></div>
  <br />
  There is a special ttl value of "daily". This tells the class to consider the
  cached data "good" as long as it was scraped today. Otherwise, go get a fresh
  copy of content from the source site and update the local cache.
  <div class="php"><code>
    <font color="#007700">if (!</font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">fetch</font><font color="#007700">(</font><font color="#0000BB">$url</font><font color="#007700">, </font><font color="#DD0000">"daily"</font><font color="#007700">)) {
    <br />&nbsp;&nbsp;echo </font><font color="#DD0000">"&lt;h2&gt;There is a problem with the http request!&lt;/h2&gt;"</font><font color="#007700">;
    
    <br />&nbsp;&nbsp;echo </font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">log</font><font color="#007700">;
    <br />&nbsp;&nbsp;exit();
    <br />}
    </font>
  </code></div>
  <br />
  Optionally, you can pass in a name that will be used to name the cache file.
  This is useful if you want to be able to know which cache files are which.
  If you do not pass a name, it will default to an MD5 hash of the url.
  <div class="php"><code>
    <font color="#007700">if (!</font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">fetch</font><font color="#007700">(</font><font color="#0000BB">$url</font><font color="#007700">, </font><font color="#0000BB">600</font><font color="#007700">, </font><font color="#DD0000">"MSFT_Info"</font><font color="#007700">)) {
    <br />&nbsp;&nbsp;echo </font><font color="#DD0000">"&lt;h2&gt;There is a problem with the http request!&lt;/h2&gt;"</font><font color="#007700">;
    <br />&nbsp;&nbsp;echo </font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">log</font><font color="#007700">;
    <br />&nbsp;&nbsp;exit();
    <br />}
    </font>
  </code></div>
  <br />
  The class comes with 2 static methods you can use to extract data out of
  HTML tables.
  <ol>
    <li><b>table_into_array()</b> will rip a single table into an array.</li>
    <li><b>table_into_xml()</b> will internally call table_into_array() then
    create an XML document from the array. I thought this would be cool, but in
    practice, I've never used this method since the array is so easy to work
    with.</li>
  </ol>
  This example builds on the previous example to extract the MSFT stats out
  of
  <a target="_blank" href="http://moneycentral.msn.com/detail/stock_quote?Symbol=MSFT">
  http://moneycentral.msn.com/detail/stock_quote?Symbol=MSFT
  </a>.
  Read the comments in the class file to learn how to use this static method.
  <div class="php"><code>
    <font color="#0000BB">
    $msft_stats </font><font color="#007700">= </font><font color="#0000BB">http</font><font color="#007700">::</font><font color="#0000BB">table_into_array</font><font color="#007700">(</font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">body</font><font color="#007700">, </font><font color="#DD0000">"Avg Daily Volume"</font><font color="#007700">, </font><font color="#0000BB">1</font><font color="#007700">, </font><font color="#0000BB">null</font><font color="#007700">);
    <br />
    <br /></font><font color="#FF8000">/* Print out the array so you can see the stats data. */
    <br /></font><font color="#007700">echo </font><font color="#DD0000">"&lt;pre&gt;"</font><font color="#007700">;
    <br /></font><font color="#0000BB">print_r</font><font color="#007700">(</font><font color="#0000BB">$msft_stats</font><font color="#007700">);
    <br />echo </font><font color="#DD0000">"&lt;/pre&gt;"</font><font color="#007700">;
    <br /></font>
  </code></div>
  <br />
  The class can do basic authentication to scrape protected content. Note that
  most sites that require login do not use basic authentication.
  Pass your username and password in like this:
  <div class="php"><code>
    <font color="#0000BB">
    $url </font><font color="#007700">= </font><font color="#DD0000">"http://someprivatesite.net"</font><font color="#007700">;
    <br /></font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">fetch</font><font color="#007700">(</font><font color="#0000BB">$url</font><font color="#007700">, </font><font color="#0000BB">0</font><font color="#007700">, </font><font color="#0000BB">null</font><font color="#007700">, </font><font color="#DD0000">"MyUserName"</font><font color="#007700">,</font><font color="#DD0000">"MyPassword"</font><font color="#007700">);
    </font>
  </code></div>
  <br />
  If your need to access content on a port other than 80 (or 443 for https),
  just put the port in the URL in the standard way:
  <div class="php"><code>
    <font color="#0000BB">
    $h</font><font color="#007700">-&gt;</font><font color="#0000BB">fetch</font><font color="#007700">(</font><font color="#DD0000">"http://somedomain.org:8088"</font><font color="#007700">);
    </font>
  </code></div>
  <br />
  The class includes a companion script named image_cache.php that can be used
  as the src attribute within an image element. Why not just link directly to a
  neighbor's images? If your site has a lot of traffic, that's a lot of hits to
  your neighbor's site. So why not just copy their image to your own server?
  That's fine for images that do not change, but some sites create dynamic
  images such as stock charts that are generated new every minute.
  image_cache.php in conjunction with class_http.php makes it easy to directly
  link to third-party images and cache the image data for whatever TTL makes
  sense for your application.
  <a href="image_cache.phps">View the source for image_cache.php</a>.
  <br /><br />
  In this example, we will cache the chart image found at
  <a target="_blank" href="http://moneycentral.msn.com/investor/charts/chartdl.asp?FC=1&Symbol=MSFT&CA=1&CB=1&CC=1&CD=1&CP=0&PT=5">
  http://moneycentral.msn.com/investor/charts/chartdl.asp?FC=1&Symbol=MSFT&CA=1&CB=1&CC=1&CD=1&CP=0&PT=5
  </a>
  You have to look at the page source code to find the url to their image. Then
  you url encode their image URL, and pass it as a parameter to image_cache.php 
  in your image's src attribute. The embedded URL is very long because it was
  long to start with, and after URL encoding, it is much longer. In this example,
  we have set ttl=60 which means cache the image for 1 minute before hitting the
  source site again.
  <div class="php"><code>
    <font color="#000000"><b>&lt;</b><font color="#800080"><b>img</b></font><font color="#008080"> </font><b>src=</b><font color="#000080">&quot;image_cache.php?ttl=60&amp;url=http%3A%2F%2Fdata.moneycentral.msn.com%2Fscripts%2Fchrtsrv.dll%3FSymbol
    <br />%3DMSFT%26C1%3D0%26C2%3D1%26C9%3D2%26CA%3D1%26CB%3D1%26CC%3D1%26CD%3D1%26CF%3D0%26EFR%3D236%26EFG%3D246%26EFB
    <br />%3D254%26E1%3D0&quot;</font><font color="#008080"> </font><b>width=</b><font color="#000080">&quot;448&quot;</font><font color="#008080"> </font><b>height=</b><font color="#000080">&quot;300&quot;</font><font color="#008080"> </font><b>alt=</b><font color="#000080">&quot;Chart Graphic&quot;</font><font color="#008080"> </font><b>/&gt;</b></font>
  </code></div>
  Tip: Use PHP's
  <a target="_blank" href="http://us2.php.net/manual/en/function.urlencode.php"><b>urlencode()</b></a>
  function to encode your embedded URLs.
  <br /><br />
  Finally, anytime you have problems, be sure to look at the 'log' property
  which will give you specific information related to problems with your
  http requests or problems with caching.
  <div class="php"><code>
    <font color="#FF8000">/*
    <br />The log property contains a log of the objects events. Very useful for
    <br />testing and debugging. If there are problems, the log will tell you what
    <br />is wrong. For example, if the cache dir specified does not have write privs,
    <br />the log will tell you it could not open the cache file. If a socket to the remote server
    <br />could not be opened, the log will tell you this.
    <br />*/
    <br /></font><font color="#007700">echo </font><font color="#DD0000">"&lt;h1&gt;Log&lt;/h1&gt;"</font><font color="#007700">;
    <br />echo </font><font color="#0000BB">$h</font><font color="#007700">-&gt;</font><font color="#0000BB">log</font><font color="#007700">;
    <br /></font>
  </code></div>
  <br />
  <hr />
  <h3>About the author</h3>
  <a href="mailto:troy@troywolf.com">Troy Wolf</a> operates
  <a href="http://www.shinysolutions.com">ShinySolutions Webhosting</a>,
  and is the author of
  <a href="http://www.snippetedit.com">SnippetEdit</a>--a PHP application
  providing browser-based website editing that even non-technical people can
  use. Website editing as easy as it gets. Troy has been a professional
  Internet and database application developer for over 10 years. He has many
  years' experience with ASP, VBScript, PHP, Javascript, DHTML, CSS, SQL, and
  XML on Windows and Linux platforms.

  </body>
</html>
